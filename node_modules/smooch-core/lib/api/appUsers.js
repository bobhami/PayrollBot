'use strict';

exports.__esModule = true;
exports.AppUsersApi = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _base = require('./base');

var _appUsersStripe = require('./appUsersStripe');

var _http = require('../utils/http');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Init API properties
 * @typedef InitProps
 */

/**
 * @class AppUsersApi
 * @extends BaseApi
 */

var AppUsersApi = exports.AppUsersApi = function (_BaseApi) {
  (0, _inherits3.default)(AppUsersApi, _BaseApi);

  function AppUsersApi() {
    (0, _classCallCheck3.default)(this, AppUsersApi);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseApi.call.apply(_BaseApi, [this].concat(args)));

    _this.stripe = new (Function.prototype.bind.apply(_appUsersStripe.AppUsersStripeApi, [null].concat(args)))();
    return _this;
  }

  /**
   * Initializes the conversation for a user
   * @param  {InitProps} props
   * @return {APIResponse}
   */

  AppUsersApi.prototype.init = function init(props) {
    var url = this.getFullURL('init');
    return this.validateAuthHeaders().then(function (headers) {
      return (0, _http.http)('POST', url, props, headers);
    });
  };

  AppUsersApi.prototype.create = function create(userId) {
    var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    if (!userId || !userId.trim()) {
      return _promise2.default.reject(new Error('Must provide an userId.'));
    }

    var payload = (0, _assign2.default)({
      userId: userId
    }, props);

    if (props.signedUpAt && !(props.signedUpAt instanceof Date)) {
      return _promise2.default.reject(new Error('signedUpAt must be a date.'));
    }

    var url = this.getFullURL('appusers');

    // this endpoint only accepts JWT auth with app scope
    return this.validateAuthHeaders(['jwt']).then(function (authHeaders) {
      return (0, _http.http)('POST', url, payload, authHeaders);
    });
  };

  /**
   * Fetch an app user
   * @param  {string} userId - an user id
   * @return {APIResponse}
   */

  AppUsersApi.prototype.get = function get(userId) {
    var url = this.getFullURL('appusers', userId);
    return this.validateAuthHeaders().then(function (headers) {
      return (0, _http.http)('GET', url, {}, headers);
    });
  };

  /**
   * Update an app user
   * @param  {string} userId     - an user id
   * @param  {object} attributes - the attributes to update
   * @return {APIResponse}
   */

  AppUsersApi.prototype.update = function update(userId, attributes) {
    var url = this.getFullURL('appusers', userId);
    return this.validateAuthHeaders().then(function (headers) {
      return (0, _http.http)('PUT', url, attributes, headers);
    });
  };

  /**
   * Track an event for an app user
   * @param  {string} userId     - an user id
   * @param  {string} eventName  - the name of the event to track
   * @param  {object} {attributes} - attributes to update before tracking the event
   * @return {APIResponse}
   */

  AppUsersApi.prototype.trackEvent = function trackEvent(userId, eventName) {
    var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var url = this.getFullURL('appusers', userId, 'events');
    return this.validateAuthHeaders().then(function (headers) {
      return (0, _http.http)('POST', url, {
        name: eventName,
        appUser: attributes
      }, headers);
    });
  };

  return AppUsersApi;
}(_base.BaseApi);