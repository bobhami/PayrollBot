'use strict';

exports.__esModule = true;
exports.ConversationsApi = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _base = require('./base');

var _http = require('../utils/http');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef Message
 *
 */

/**
 * @class ConversationsApi
 * @extends BaseApi
 */

var ConversationsApi = exports.ConversationsApi = function (_BaseApi) {
  (0, _inherits3.default)(ConversationsApi, _BaseApi);

  function ConversationsApi() {
    (0, _classCallCheck3.default)(this, ConversationsApi);
    return (0, _possibleConstructorReturn3.default)(this, _BaseApi.apply(this, arguments));
  }

  /**
   * Fetch an app user's conversation
   * @param  {string} userId - an user id
   * @return {APIResponse}
   */

  ConversationsApi.prototype.get = function get(userId) {
    var url = this.getFullURL('appUsers', userId, 'conversation');
    return this.validateAuthHeaders().then(function (headers) {
      return (0, _http.http)('GET', url, {}, headers);
    });
  };

  /**
   * Send a message to an app user's conversation
   * @param  {string} userId - an user id
   * @param  {Message} message - the message to be sent
   * @return {APIResponse}
   */

  ConversationsApi.prototype.sendMessage = function sendMessage(userId, message) {
    var url = this.getFullURL('appUsers', userId, 'conversation', 'messages');
    return this.validateAuthHeaders().then(function (headers) {
      return (0, _http.http)('POST', url, message, headers);
    });
  };

  /**
   * Reset the unread count of the conversation
   * @return {APIResponse}
   */

  ConversationsApi.prototype.resetUnreadCount = function resetUnreadCount(userId) {
    var url = this.getFullURL('appUsers', userId, 'conversation', 'read');
    return this.validateAuthHeaders().then(function (headers) {
      return (0, _http.http)('POST', url, {}, headers);
    });
  };

  return ConversationsApi;
}(_base.BaseApi);